# -*- coding: utf-8 -*-
"""Project 3 - Heart Failure Disease Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tzWbgkzKiLt4ydd7S9y2d_QkqLTVSVrf

# **üåüImport the Depedencies**
*   pandas - making dataframes
*   matplotlib& seaborn - used to make graphs & plots
*   sklearn - to perform regression / classification
*   metrics - to identify outliers / errors etc.
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px

"""# **üåüData Collection**

## **‚≠êReading Data**
"""

df = pd.read_csv('/content/heart.csv')
df.head()

"""## **‚≠êExploration of Data**"""

print(f'Data has {df.shape[0]} rows , {df.shape[1]} columns.')

"""## **‚≠êChecking Null values**"""

print(df.isnull().sum())

"""## **‚≠êChecking Duplicated Rows**"""

print("Num of Duplicated Rows is: ",df.duplicated().sum())

"""## **‚≠êChecking Data Types**"""

df.dtypes

"""# **üåü Data Analysis**

## **‚≠êChecking Distribution of Age**
"""

print("Min of ages is ",df['Age'].min())
print("Max of ages is ",df['Age'].max())
print("Most freq age is ",df['Age'].mode()[0])
print("Range of ages from ",df['Age'].min(),"to ",df['Age'].max())



data = df['Age']

fig = go.Figure(data=[go.Histogram(x=data, marker_color='lightgreen',

                                    marker=dict(color='red'),
                                    text=data.value_counts().sort_index().values)])

fig.update_layout(
    title='Distribution of Age',
    title_font_size=16,
    xaxis_title='Age',
    yaxis_title='Frequency',


    width=800,  # Set the width of the plot
    height=600,  # Set the height of the plot

    title_x=0.5,  # Set the title's x position to the center of the plot
    plot_bgcolor='black'  # Set background color to black
)
print('\n')
fig.show()

"""## **‚≠êChecking Distribution of Sex**"""

male_count = len(df[df['Sex'] == 'M'])
print("Count of males   :", male_count)

female_count = len(df[df['Sex'] == 'F'])
print("Count of Females:", female_count)


fig = px.bar(df, x='Sex', color='Sex', labels={'Sex': 'Gender'},
             color_discrete_map={"M": '#7799cc', "F": "pink"})

fig.update_traces(textposition='inside',
                  hoverinfo='none', marker_line_width=0)




for i, count in enumerate([len(df[df['Sex'] == 'M']), female_count]):
    fig.add_annotation(x=i, y=count, text=str(count),
                       showarrow=False, font=dict(color='white', size=16))

fig.update_layout(title='Gender Distribution', title_font_size=16,
                  xaxis_title='Gender', yaxis_title='Count',
                  bargap=0.1, width=800, height=600,
                     title_x=0.5,  plot_bgcolor='black'
   )

print('\n')
fig.show()

"""## **‚≠êChecking Distribution of Sex**"""

print(df['ChestPainType'].value_counts())

fig = px.bar(df, x='ChestPainType', color='ChestPainType', labels={'ChestPainType': 'Chest Pain Type'},
             color_discrete_map={'0': '#1f77b4', '1': '#ff7f0e', '2': '#2ca02c', '3': '#d62728'})


fig.update_traces(textposition='inside',
                  hoverinfo='none', marker_line_width=0)


for i, count in enumerate(df['ChestPainType'].value_counts().sort_index()):
    fig.add_annotation(x=i, y=count, text=str(count),
                       showarrow=False, font=dict(color='white', size=16))

fig.update_layout(title='Distribution of ChestPainType', title_font_size=16,
                  xaxis_title='Chest Pain Type', yaxis_title='Count',
                  bargap=0.1, width=800, height=600,    title_x=0.5, plot_bgcolor='black')

print('\n')
fig.show()

"""## **‚≠êChecking Distribution of RestingECG**"""

resting_ecg_counts = df['RestingECG'].value_counts()
print(resting_ecg_counts)


colors =colors = ['skyblue', 'mediumturquoise', 'lightgreen']


fig = px.pie(names=resting_ecg_counts.index,
             values=resting_ecg_counts.values,
             color_discrete_sequence=colors)

explode = [0.05 if index == 'Normal' else 0 for index in resting_ecg_counts.index]


fig.update_layout(title='Distribution of RestingECG',
                  title_font_size=16,
                  width=800,
                  height=600,
                  title_x=0.5)


fig.update_traces(pull=explode)

print('\n')
fig.show()

"""## **‚≠êChecking Distribution of FastingBS**

### 1: if FastingBS > 120 mg/dl, 0: otherwise
"""

FastingBS_counts = df['FastingBS'].value_counts()
print('FastingBS_counts')
print(FastingBS_counts)


colors =colors = ['skyblue','lightgreen']


fig = px.pie(names=FastingBS_counts.index,
             values=FastingBS_counts.values,
             color_discrete_sequence=colors)



fig.update_layout(title='Distribution of FastingBS',
                  title_font_size=16,
                  width=600,
                  height=500,
                  title_x=0.5)

print('\n')
fig.show()

"""## **‚≠êChecking Distribution of Cholesterol**"""

print("Min of Cholesterol is     :",df['Cholesterol'].min())
print("Max of Cholesterol is     :",df['Cholesterol'].max())
print("Most freq Cholesterol is  :",df['Cholesterol'].mode()[0])
print("Range of Cholesterol from :",df['Cholesterol'].min(),"to ",df['Cholesterol'].max())

fig = px.histogram(df, x='Cholesterol',
                   title='Distribution of Cholesterol')


fig.update_layout(title_font_size=16, width=800, height=600, title_x=0.5,
                  plot_bgcolor='black')

fig.update_traces(marker_color='lightgreen')


fig.update_traces(texttemplate='%{y}', textposition='inside')

print('\n')
fig.show()

"""##**‚≠êChecking Distribution of MaxHR**"""

print("Min of MaxHR is     :",df['MaxHR'].min())
print("Max of MaxHR is     :",df['MaxHR'].max())
print("Most freq MaxHR is  :",df['MaxHR'].mode()[0])
print("Range of MaxHR from :",df['MaxHR'].min(),"to ",df['MaxHR'].max())

fig = px.histogram(df, x='MaxHR',
                   title='Distribution of MaxHR')


fig.update_layout(title_font_size=16, width=800, height=600, title_x=0.5,
                  plot_bgcolor='black')


fig.update_traces(marker_color='lightgreen')


fig.update_traces(texttemplate='%{y}', textposition='inside')

print('\n')
fig.show()

"""##**‚≠êChecking Distribution of ExerciseAngina**

"Exercise Angina" refers to a type of chest pain or discomfort that occurs when the heart muscle doesn't receive enough blood flow during physical activity or exertion.
"""

ExerciseAngina_counts = df['ExerciseAngina'].value_counts()
print('ExerciseAngina')
print(ExerciseAngina_counts)


colors =colors = ['skyblue',  'lightgreen']


fig = px.pie(names=ExerciseAngina_counts.index,
             values=ExerciseAngina_counts.values,
             color_discrete_sequence=colors, hole=0.4)



fig.update_layout(title='Distribution of ExerciseAngina',
                  title_font_size=16,
                  width=500,
                  height=600,
                  title_x=0.5)



print('\n')
fig.show()

"""##**‚≠êChecking Distribution of HeartDisease**

1: heart disease, 0: Normal
"""

without = len(df[df['HeartDisease'] == 0])
print("Count of Normal (Not have HeartDisease)   :", without)

with_ = len(df[df['HeartDisease'] == 1])
print("Count of patients with HeartDisease       :", with_)




value_counts = df['HeartDisease'].value_counts()

# Define colors for bars
colors = [ '#ff7f0e','#2ca02c']

# Create a bar chart
fig = go.Figure(go.Bar(x=value_counts.index, y=value_counts.values, marker_color=colors))

# Add text annotations
for i, val in enumerate(value_counts.values):
    fig.add_annotation(x=i, y=val, text=str(val), font=dict(color='white'), showarrow=False)

# Update layout
fig.update_layout(title='Distribution of Heart Disease',
                  xaxis=dict(title='Heart Disease'),
                  yaxis=dict(title='Count'),
                  title_font_size=16, width=800, height=600, title_x=0.5, plot_bgcolor='black')

print('\n')
# Show the plot
fig.show()

"""##**‚≠êChecking Distribution of HeartDisease by Age**"""

plt.figure(figsize=(8, 6))
sns.lineplot(x=df['Age'], y=df['HeartDisease'], data=df, linewidth=2)


plt.title('Heart Disease for Ages', fontsize=16)
plt.xlabel('Age')
plt.ylabel('Heart Disease')

plt.gca().set_facecolor('black')

# Show the plot
plt.show()

"""##**‚≠êChecking Distribution of HeartDisease by Age**"""

fig = px.scatter(df, y = 'Age',x='Cholesterol', color='Cholesterol' )


fig.update_layout(title='Cholesterol by Age',
                  title_font_size=16,
                  width=800,
                  height=600,
                  title_x=0.5, plot_bgcolor='black')

fig.show()

"""## **‚≠ê 'RestingECG','ST_Slope','ChestPainType','ExerciseAngina' by Heart Disease**"""

from plotly.subplots import make_subplots

list=['RestingECG','ST_Slope','ChestPainType','ExerciseAngina']

fig = make_subplots(rows=2, cols=2, subplot_titles=list)

for i, col in enumerate(list, 1):



    Col_fordisease  = df.groupby([col, 'Sex']).size().reset_index(name='count')

    custom_palette = {"M": '#7799cc', "F": "pink"}

    for gender, color in custom_palette.items():
        gender_data = Col_fordisease[Col_fordisease['Sex'] == gender]
        fig.add_trace(go.Bar(x=gender_data[col], y=gender_data['count'],
                         text=gender_data['count'],
                         name=gender, marker_color=color),
                      row=(i+1)//2, col=(i+1)%2+1)

    fig.update_xaxes(title_text=col, row=(i+1)//2, col=(i+1)%2+1)
    fig.update_yaxes(title_text='Count', row=(i+1)//2, col=(i+1)%2+1)

fig.update_layout(title_text="Charts by Heart Disease", title_font_size=16, title_x=0.5, plot_bgcolor='black',
                  height=900)

fig.show()

"""## **‚≠ê'RestingECG','ST_Slope','ChestPainType','ExerciseAngina' by Heart Disease**"""

list=['RestingECG','ST_Slope','ChestPainType','ExerciseAngina']

fig = make_subplots(rows=2, cols=2, subplot_titles=list)

for i, col in enumerate(list, 1):



    Col_fordisease  = df.groupby([col, 'HeartDisease']).size().reset_index(name='count')

    custom_palette = {0: '#2ca02c', 1: '#ff7f0e'}

    for gender, color in custom_palette.items():
        gender_data = Col_fordisease[Col_fordisease['HeartDisease'] == gender]
        fig.add_trace(go.Bar(x=gender_data[col], y=gender_data['count'],
                         text=gender_data['count'],
                         name=gender, marker_color=color),
                      row=(i+1)//2, col=(i+1)%2+1)

    fig.update_xaxes(title_text=col, row=(i+1)//2, col=(i+1)%2+1)
    fig.update_yaxes(title_text='Count', row=(i+1)//2, col=(i+1)%2+1)

fig.update_layout(title_text="Charts by Heart Disease", title_font_size=16, title_x=0.5, plot_bgcolor='black',
                  height=900)

fig.show()

"""# **üåü Preprocessing**

## **‚≠ê Feature Selection**
"""

X = df.drop('HeartDisease', axis=1)
y = df['HeartDisease']
X

"""## **‚≠ê Covert Catogrical Data To Numerical**"""

X=pd.get_dummies(X, drop_first=True)
X

"""## **‚≠ê Scalling the Data**"""

from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
scaler.fit(X)

X_scaled= scaler.transform(X)
print("Normalized input data(X):\n", X_scaled)

"""## **‚≠ê Spliting the Data**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""# **üåü Model Selection**"""

from sklearn.model_selection import GridSearchCV
from xgboost import XGBClassifier


xgb = XGBClassifier()

# Define the hyperparameter grid for grid search
param_grid = {
    'n_estimators': [100, 200, 300, 800,850],
    'learning_rate': [0.01, 0.001, 0.1, 0.2],
    'max_depth': [3, 4, 5,6],
}


grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, scoring='roc_auc', cv=10, n_jobs=-1)

"""## **‚≠ê Fitting the model**"""

grid_search.fit(X_train, y_train)

"""## **‚≠ê Best hyper parameters ,best_estimator by XGBoost**"""

print("Best hyperparameters: ", grid_search.best_params_)

best_model = grid_search.best_estimator_
print(best_model)

"""## **‚≠ê Prediction**"""

y_pred=best_model.predict(X_test)
print(y_pred)

result_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred.flatten() })
result_df

"""# **üåü Evaluation of Model**

## **‚≠ê confusion_matrix**
"""

from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix for XGBoostClassifier:')
print(conf_matrix)

print("__"*50 )

print("num of True Positive :",conf_matrix[1][1])
print("num of True Negative :",conf_matrix[0][0])
print("num of False Positive :",conf_matrix[0][1])
print("num of False Negative :",conf_matrix[1][0])

sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Greys', cbar=False)
plt.title('Confusion Matrix for XGBoostClassifier')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

"""## **‚≠ê Classification Report**"""

from sklearn.metrics import classification_report

classification_rep = classification_report(y_test, y_pred)
print('\nClassification Report for XGBoostClassifier:')
print(classification_rep)

"""## **‚≠ê Evaluation**"""

from sklearn.metrics import precision_score, recall_score ,accuracy_score


# Calculate precision and recall
precision = precision_score(y_test, y_pred)
print(f'Precision of XGBoostClassifier : {precision*100:.2f} %')

recall = recall_score(y_test, y_pred)
print(f'Recall of XGBoostClassifier    : {recall*100:.2f} %')

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of XGBoostClassifier  : {accuracy*100:.2f} %')

